<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xdb="http://exist-db.org/ant" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- the properties file -->
    <property file="build.properties"/>
    <property file="version.properties"/>

    <!-- hold jars for running ant tasks -->
    <property name="lib" value="lib"/>

    <!-- ivy installation -->
    <property name="ivy.install.version" value="2.1.0-rc2"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <!-- create lib for holding jars needed for running ant tasks -->
    <target name="init">
        <mkdir dir="${lib}"/>
    </target>

    <!-- download ivy -->
    <target name="download-ivy" unless="offline">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <!-- download files needed for running the eXist ant tasks -->
    <target name="resolve" depends="init,init-ivy">
        <ivy:retrieve/>
        <!-- needed to run ant tasks -->
        <path id="classpath.core">
            <fileset dir="${lib}">
                <include name="*.jar"/>
            </fileset>
        </path>

        <!-- include exist ant tasks -->
        <typedef resource="org/exist/ant/antlib.xml" uri="http://exist-db.org/ant">
            <classpath refid="classpath.core"/>
        </typedef>
    </target>


    <!-- Get the authentication credentials (and check we have properties)-->
    <target name="credentials">
        <fail unless="xmlrpc">No exist xmlprc, i,e. property 'xmlrpc'!</fail>
        <!-- get the username and password -->
        <echo>${xmlrpc}</echo>
        <input message="Enter username:" addproperty="username"/>
        <input message="Enter password:" addproperty="password">
            <handler classname="org.apache.tools.ant.input.SecureInputHandler"/>
        </input>
    </target>

    <!-- clean existing build and dist -->
    <target name="clean">
        <delete dir="build"/>
        <delete dir="dist"/>
    </target>

    <!-- build stage -->
    <target name="build" depends="init-ivy,clean">
        <!-- copy the app src to build -->
        <copy todir="build">
            <fileset dir="src/app">
                <exclude name="**/*.bak"/>
            </fileset>
        </copy>
        <!-- update the version number in the app -->
        <replace dir="build/" includes="**/expath-pkg.xml,**/repo.xml"
                 token="@APPVERSION@"
                 value="${build.major}.${build.minor}.${build.patch}"/>
         <replace dir="build/" includes="**/modules/config.xqm"
                 token="@ANALYTICS_TOKEN@"
                 value="${google.analytics}"/>
    </target>

    <!-- create distributable app -->
    <target name="dist" depends="build">
        <copy todir="dist">
            <fileset dir="src/deploy">
                <include name="**/*.xql"/>
            </fileset>
        </copy>
        <replace dir="dist/" includes="**/deploy.xql,**/repo.xml"
                 token="@APPVERSION@"
                 value="${build.major}.${build.minor}.${build.patch}"/>
        <zip destfile="dist/mpese-app-${build.major}.${build.minor}.${build.patch}.xar" basedir="build"/>
    </target>

    <!-- Store the .xar file in the database -->
    <target name="store" depends="dist,resolve,credentials">
        <xdb:store uri="${xmlrpc}/db/xar_files" ssl="${ssl}"
                   createcollection="true" user="${username}" password="${password}">
            <fileset dir="dist">
                <include name="*.xar"/>
            </fileset>
        </xdb:store>
    </target>

    <!-- Remove previous the application .xar -->
    <target name="undeploy" depends="resolve,store">
        <loadfile property="xquery_undeploy" srcFile="dist/undeploy.xql"/>
        <xdb:xquery uri="${xmlrpc}/db" user="${username}" password="${password}" ssl="${ssl}"
                    query="${xquery_undeploy}" outputproperty="undeploy_output"/>
        <echoproperties>
            <propertyset>
                <propertyref name="undeploy_output"/>
            </propertyset>
        </echoproperties>
    </target>

    <!-- Deploy the application .xar -->
    <target name="deploy" depends="undeploy">
        <loadfile property="xquery_deploy" srcFile="dist/deploy.xql"/>
        <xdb:xquery uri="${xmlrpc}/db" user="${username}" password="${password}" ssl="${ssl}"
                    query="${xquery_deploy}" outputproperty="deploy_output"/>
        <echoproperties>
            <propertyset>
                <propertyref name="deploy_output"/>
            </propertyset>
        </echoproperties>

        <get src="${test.url}" dest="test-results.xml"/>
        <loadfile property="test-results" srcFile="test-results.xml"/>
        <echo>${test-results}</echo>
        <fail message="There are failed tests.">
            <condition>
                <contains string="${test-results}" substring="failure-error-code"/>
            </condition>
        </fail>
    </target>

    <!-- Deploy the application .xar -->
    <target name="deploy-demo" depends="deploy">
        <loadfile property="xquery_perms" srcFile="dist/permissions.xql"/>
        <xdb:xquery uri="${xmlrpc}/db" user="${username}" password="${password}" ssl="${ssl}"
                    query="${xquery_perms}" outputproperty="deploy_output"/>
        <echoproperties>
            <propertyset>
                <propertyref name="deploy_output"/>
            </propertyset>
        </echoproperties>
    </target>

    <!-- Data tasks -->

    <!-- Create a witness list -->
    <target name="create-witness-list" depends="resolve, credentials">
        <loadfile property="xquery_witness_list" srcFile="src/jobs/create_witness_list.xql"/>
        <xdb:xquery uri="${xmlrpc}/db" user="${username}" password="${password}" ssl="${ssl}"
                    query="${xquery_witness_list}" outputproperty="job_output"/>
        <echoproperties>
            <propertyset>
                <propertyref name="job_output"/>
            </propertyset>
        </echoproperties>
    </target>

    <!-- Create ms label -->
    <target name="create-ms-label" depends="resolve, credentials">
        <loadfile property="xquery_ms_label" srcFile="src/jobs/create_ms_label.xql"/>
        <xdb:xquery uri="${xmlrpc}/db" user="${username}" password="${password}" ssl="${ssl}"
                    query="${xquery_ms_label}" outputproperty="job_output"/>
        <echoproperties>
            <propertyset>
                <propertyref name="job_output"/>
            </propertyset>
        </echoproperties>
    </target>

    <!-- Proofreading report -->
    <target name="proofreading-report" depends="resolve, credentials">
        <loadfile property="xquery_report" srcFile="src/jobs/proofreading_report.xql"/>
        <xdb:xquery uri="${xmlrpc}/db" user="${username}" password="${password}" ssl="${ssl}"
                    query="${xquery_report}" outputproperty="job_output"/>
        <echoproperties destfile="report.txt">
            <propertyset>
                <propertyref name="job_output"/>
            </propertyset>
        </echoproperties>
    </target>

    <!-- use python script to get 'simple' texts -->
    <target name="get-texts">
        <mkdir dir="data/text-original"/>
        <exec dir="src/python" executable="python">
            <arg line="get_texts.py ${server.base.url} ${basedir}/data/text-original"/>
        </exec>
    </target>

    <!-- normalize texts with Vard -->
    <target name="run-vard">
        <java jar="${vard.home}/clui.jar" fork="true" dir="${vard.home}">
            <jvmarg value="-Xms256M"/>
            <jvmarg value="-Xmx512M"/>
            <arg line="${basedir}src/vard/setup 50 1 ${basedir}/data/text-original true  ${basedir}/data/text-normalized true"/>
        </java>
    </target>

    <!-- store normalized texts -->
    <target name="store-normalized" depends="resolve,credentials">
        <xdb:store uri="${xmlrpc}/db/mpese/normalized/texts" ssl="${ssl}"
                   createcollection="true" user="${username}" password="${password}">
            <fileset dir="${basedir}/data/text-normalized/varded(50%) - Changes Tagged">
                <include name="*.xml"/>
            </fileset>
        </xdb:store>
    </target>

    <!-- normalize texts -->
    <target name="normalize-texts" depends="get-texts,run-vard,store-normalized"/>

    <!-- extract data -->
    <target name="extract-data" depends="resolve,credentials">
        <xdb:extract uri="${xmlrpc}/db/mpese/tei/corpus" ssl="${ssl}" user="${username}" password="${password}"
                     createdirectories="true" subcollections="true" destdir="${extract.dir}" overwrite="true"/>
    </target>

    <!-- use python script to get PDFs -->
    <target name="get-texts-pdf">
        <mkdir dir="data/text-pdf"/>
        <exec dir="src/python" executable="python">
            <arg line="get_pdfs.py ${server.base.url} ${basedir}/data/text-pdf"/>
        </exec>
    </target>

</project>